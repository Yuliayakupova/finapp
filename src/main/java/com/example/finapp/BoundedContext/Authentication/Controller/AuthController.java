package com.example.finapp.BoundedContext.Authentication.Controller;

import com.example.finapp.BoundedContext.Authentication.Request.CreateUserRequest;
import com.example.finapp.BoundedContext.Authentication.Request.LoginRequest;
import com.example.finapp.BoundedContext.UserManagment.DTO.User;
import com.example.finapp.BoundedContext.UserManagment.Repository.UserRepository;
import com.example.finapp.SharedContext.Security.JwtResponse;
import com.example.finapp.SharedContext.Security.JwtService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Controller class responsible for handling authentication operations such as user registration and login.
 * Provides endpoints for user registration and authentication via login using JWT.
 */
@RestController
@RequestMapping("/api/v1/authentication")
public class AuthController {

    private final UserRepository userRepository;
    private final JwtService jwtService;
    private final PasswordEncoder passwordEncoder;

    /**
     * Constructor for the AuthController class.
     * Initializes the dependencies for UserRepository, JwtService, and PasswordEncoder.
     *
     * @param userRepository The repository for user data.
     * @param jwtService The service responsible for generating JWT tokens.
     * @param passwordEncoder The password encoder to hash and verify passwords.
     */
    public AuthController(UserRepository userRepository, JwtService jwtService, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.jwtService = jwtService;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * Registers a new user by accepting a request containing user data, encoding the password,
     * and saving the user in the repository.
     *
     * @param request The request object containing user registration information.
     * @return A ResponseEntity indicating the success or failure of the registration process.
     */
    @PostMapping("/register")
        public ResponseEntity<String> register(@RequestBody CreateUserRequest request) {
            // Encode the user's password before saving to the database
            String encodedPassword = passwordEncoder.encode(request.getPassword());

            // Create a new User object and save it to the repository
            User user = new User(
                    0, // User ID is set to 0 since it will be auto-generated by the repository
                    request.getEmail(),
                    encodedPassword,
                    request.getName(),
                    null, // Registration date will be set by the repository
                    false // Initially, the user is not authenticated
            );
            userRepository.create(user); // Save user to the repository
        return ResponseEntity.ok("User registered successfully");
    }

    /**
     * Handles user login by verifying the provided credentials.
     * If successful, a JWT token is generated and returned.
     *
     * @param request The request object containing login credentials.
     * @return A ResponseEntity containing the JWT token if authentication is successful, or a 401 Unauthorized status if it fails.
     */
    @PostMapping("/login")
    public ResponseEntity<JwtResponse> login(@RequestBody LoginRequest request) {
        try {
            // Find the user by email in the repository
            User user = userRepository.findByEmail(request.getEmail());

            // Verify if the provided password matches the stored password
            if (passwordEncoder.matches(request.getPassword(), user.getPassword())) {
                // Generate a JWT token for the authenticated user
                String token = jwtService.generateToken(user.getUserId());
                return ResponseEntity.ok(new JwtResponse(token)); // Return the generated JWT token
            } else {
                return ResponseEntity.status(401).build(); // Unauthorized if password does not match
            }
        } catch (Exception e) {
            return ResponseEntity.status(401).build(); // Unauthorized if user is not found or any other error occurs
        }
    }
}
